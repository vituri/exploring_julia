{
  "hash": "2bea6c5f7afeadd349b89d84ad8c785e",
  "result": {
    "engine": "jupyter",
    "markdown": "# Vectors\n\nVectors are one of the fundamental blocks of Julia programming. They are sequences of objects (strings, numbers, dates, etc.)\n\nThere are many ways to define vectors in Julia.\n\nWe can put the numbers 1, 2 and 3 together in a vector as follows:\n\n::: {#b46e1ef3 .cell execution_count=1}\n``` {.julia .cell-code}\n[1, 2, 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n3-element Vector{Int64}:\n 1\n 2\n 3\n```\n:::\n:::\n\n\nWe can also specify the beginning and ending of a sequence of integers like this:\n\n::: {#3770d895 .cell execution_count=2}\n``` {.julia .cell-code}\n[1:7;]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n7-element Vector{Int64}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n```\n:::\n:::\n\n\nand we can even go in steps of size different than 1:\n\n::: {#1d6a62b6 .cell execution_count=3}\n``` {.julia .cell-code}\n[1:2:11;]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n6-element Vector{Int64}:\n  1\n  3\n  5\n  7\n  9\n 11\n```\n:::\n:::\n\n\nNote the `;` symbol after 1:7; it is necessary to transform the object into a true vector, instead of a `range` object. We will talk more about `types` later.\n\n::: {.callout-note icon=false}\n## Problem \n\nFind the sum of all odd numbers from 1 to 999.\n\n:::\n\n::: {.callout-tip icon=false}\n## Solution\n\n::: {#b4ad0527 .cell execution_count=4}\n``` {.julia .cell-code}\nv = [1:2:999;]\nsum(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n250000\n```\n:::\n:::\n\n\n:::\n\nWe can also create vectors of anything:\n\n::: {#6c561a96 .cell execution_count=5}\n``` {.julia .cell-code}\nv = [\"julia\", \"is\", \"nice!\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n3-element Vector{String}:\n \"julia\"\n \"is\"\n \"nice!\"\n```\n:::\n:::\n\n\nand sort them\n\n::: {#fee98515 .cell execution_count=6}\n``` {.julia .cell-code}\nsort(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n3-element Vector{String}:\n \"is\"\n \"julia\"\n \"nice!\"\n```\n:::\n:::\n\n\n## List comprehensions\n\nList comprehensions are a nice way to write vectors:\n\n::: {#1ac89436 .cell execution_count=7}\n``` {.julia .cell-code}\n[x^2 for x ∈ 1:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n5-element Vector{Int64}:\n  1\n  4\n  9\n 16\n 25\n```\n:::\n:::\n\n\nand they resemble a lot the mathematical notation of sets:\n\n$$\n\\{x^2 \\; \\text{for } x \\in \\{1, \\ldots, 5 \\} \\}\n$$\n\nYou can specify conditions on list comprehensions:\n\n::: {#926a7ee9 .cell execution_count=8}\n``` {.julia .cell-code}\n[x^2 for x ∈ 1:10 if (x % 2 == 0)]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n5-element Vector{Int64}:\n   4\n  16\n  36\n  64\n 100\n```\n:::\n:::\n\n\n::: {.callout-note icon=false}\n## Problem (Project Euler problem 1)\n\nFind the sum of all the multiples of $3$ or $5$ below $1000$.\n:::\n\n::: {.callout-tip icon=false}\n## Solution\n\n::: {#7414b35e .cell execution_count=9}\n``` {.julia .cell-code}\nv = [x for x ∈ 1:999 if (x % 3 == 0 || x % 5 == 0)]\nsum(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n233168\n```\n:::\n:::\n\n\n:::\n\n\n## Broadcasting\n\nBroadcast is apply a function to each element of a vector (or iterable object).\n\nSuppose we have this function:\n\n::: {#c8df4496 .cell execution_count=10}\n``` {.julia .cell-code}\nsquare(x::Integer) = x^2;\n```\n:::\n\n\nand \n\n::: {#44e54d66 .cell execution_count=11}\n``` {.julia .cell-code}\nv = [1:5;]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n5-element Vector{Int64}:\n 1\n 2\n 3\n 4\n 5\n```\n:::\n:::\n\n\nThen we can apply it to each element of a vector in the following ways:\n\n- using list comprehensions:\n\n::: {#35b00a17 .cell execution_count=12}\n``` {.julia .cell-code}\n[square(x) for x ∈ v]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n5-element Vector{Int64}:\n  1\n  4\n  9\n 16\n 25\n```\n:::\n:::\n\n\n- using the `map` operator:\n\n::: {#83bbc760 .cell execution_count=13}\n``` {.julia .cell-code}\nmap(square, v)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n5-element Vector{Int64}:\n  1\n  4\n  9\n 16\n 25\n```\n:::\n:::\n\n\n- using the broadcast operator with the dot syntax:\n\n::: {#4090de58 .cell execution_count=14}\n``` {.julia .cell-code}\nsquare.(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n5-element Vector{Int64}:\n  1\n  4\n  9\n 16\n 25\n```\n:::\n:::\n\n\nFor functions that are called by a symbol (like `+`, `^`, etc.) we have to put the dot before the symbol, like this:\n\n::: {#e2f35fdb .cell execution_count=15}\n``` {.julia .cell-code}\n[1:5;] .* 5\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n5-element Vector{Int64}:\n  5\n 10\n 15\n 20\n 25\n```\n:::\n:::\n\n\n::: {.callout-note icon=false}\n## Problem (Project Euler problem 6)\n\n<p> The sum of the squares of the first ten natural numbers is\n$1^2+ 2 ^2+ \\dots + 10^2 = 385.$</p>\n<p>The square of the sum of the first ten natural numbers is\n$(1+ 2+ \\dots + 10)^2 = 3025.$</p>\n</p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025-385 = 2640.$</p>\n\n</p> Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum. </p>\n:::\n\n::: {.callout-tip icon=false}\n## Solution\n\n::: {#b9e7c256 .cell execution_count=16}\n``` {.julia .cell-code}\nsum(1:100)^2 - sum((1:100).^2)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n25164150\n```\n:::\n:::\n\n\n:::\n\n\n## Common operations on vectors\n\nWe can do many things with vectors.\n\n### Sorting\n\n### filtering\n\n### Applying functions\n\n### Intersecting\n\n## Case study: solving number-theory problems\n\n### Prime numbers\n\n::: {.callout-note icon=false}\n## Problem \n\nWrite a function that find all the prime numbers up to $n$.\n:::\n\n::: {.callout-tip icon=false}\n## Solution\n\nLet's use the Sieve of Erastothenes algorithm to do that.\n\n::: {#b34cb22a .cell execution_count=17}\n``` {.julia .cell-code}\n\"\"\"\nReturn a vector with all primes up to `n` using the\nsieve of Eratosthenes algorithm.\n\"\"\"\nfunction sieve_of_eratosthenes(n::Integer)\n    sieve = trues(n)  # Create a boolean vector to mark primes\n    \n    # Set the multiples of primes as false (not prime)\n    for i in 2:isqrt(n) # iterate until the integer part of sqrt(2)\n\n    # if the number is not a multiple,\n      if sieve[i] == true\n\n      # iterate trough its multiples and set then to false\n        for j in i^2:i:n\n          sieve[j] = false\n        end\n      end\n    end\n    \n    primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes\n    \n    return primes\nend;\n```\n:::\n\n\n::: {#b37422b3 .cell execution_count=18}\n``` {.julia .cell-code}\nsieve_of_eratosthenes(100) |> string\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n\"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\"\n```\n:::\n:::\n\n\n:::\n\n### Collatz conjecture\n\nThe Collatz conjecture etc.\n\n::: {#86bccefb .cell execution_count=19}\n``` {.julia .cell-code}\nfunction next_step(n::Integer)\n    n == 1 && return(1)\n\n    if iseven(n)        \n        div(n, 2)\n    else\n        3*n + 1\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nnext_step (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {#daa9c9b7 .cell execution_count=20}\n``` {.julia .cell-code}\nnext_step(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n10\n```\n:::\n:::\n\n\n::: {#0fe091cb .cell execution_count=21}\n``` {.julia .cell-code}\nDict(\"a\" => 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\nDict{String, Int64} with 1 entry:\n  \"a\" => 1\n```\n:::\n:::\n\n\n",
    "supporting": [
      "vectors_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}